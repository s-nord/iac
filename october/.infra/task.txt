Задание:

Требуется запустить указанное приложение на виртуальном сервере указаного облачного провайдера, настроить CI/CD, используя указанный инструмент, предварительно настроить окружение для работы данного приложения средствами Terraform и Ansible. В ходе выполнения задания необходимо соблюдать правила и условия, указанные ниже в соответствующих разделах.

Данные для переменных указанных в теле задания:

Вариант 16: {"app": "https://github.com/octobercms/october", "cloud": "DigitalOcean", "cicd": "GitLab CI", "logging": "Graylog"}

Требования к реализации:

    К Git репозиторию:
        Репозиторий должен храниться в RebrainMe GitLab в приватном репозитории пользователя
        В репозитории не должно храниться никаких секретных данных
        В репозитории должны содержаться скрипты up.sh и down.sh, которые запускают и, соответственно, останавливают окружение

    К виртуальному серверу:
        Ресурсы для виртуальной машины должны не превышать минимальные показатели для работы всей инфраструктуры
        Требуемые ресурсы на каждую компоненту инфраструктуры должны быть обоснованы
        Виртуальные сервера должны создаваться через Terraform
        Terraform манифесты должны храниться в репозитории с кодом с директории .infra/terraform
        Состояние Terraform НЕ должно храниться в Git репозитории
        Извне у сервера допускается доступ только по портам 22, 80 и 443, которые используют SSH и nginx. Доступ к остальным сервисам должен производиться через них

    К конфигурации серверов:
        В роли ОС использовать Ubuntu 18.04
        В роли инструмента конфигурации серверов использовать Ansible
        Ansible роли и прочие связанные с ним файлы должны храниться в .infra/ansible
        Секретные данные для конфигурации сервера и приложений должны храниться в Ansible Vault хранилище по пути .infra/ansible/vaults/vault.yml и шифроваться паролем RebrainDevOps
        Конфигурационные файлы, systemd unit, базы и пользователи в СУБД, требуемые директории и прочие инфраструктурные зависимости должны создаваться/устанавливаться средствами Ansible необходимыми для того средствами, чтобы полностью исключить ручные действия на серверах
        hosts файл НЕ разрешено хранить в репозитории - он должен храниться только в конфигурации CI/CD
        Должны быть реализованы роли, которые:
            Создают пользователя cicd, app, admin и добавляет к ним необходимые SSH ключи, указываемые через переменные
            Устанавливают nginx для перенаправления трафика к конечному приложению, где в роли публичного DNS имени использовать адрес из пространства nip.io
            Устанавливают необходимую для работы приложения СУБД PostgreSQL и конфигурирует её для доступа только с самого хоста
            Настраивает средства для получения Let's Encrypt сертификата и их обновления по Cron раз в месяц
            Устанавливать необходимый стек для сбора логов приложения, включая конфигурационные файлы
            Устанавливать стек Prometheus + node_exporter и связывать их друг с другом через конфигурационные файлы
            Устанавливать Grafana и связывать её с Prometheus и стеком сбора логов через конфигурационные файлы

    К запускаемому приложению:
        Работа приложения должна управляться через systemd
        Приложение должно автоматически перезапускаться при сбоях
        Файлы приложения должны храниться в директории внутри /opt/
        Приложение должно запускаться от имени пользователя app

    К сборке и выкладке приложения:
        Сценарий выкладки должен включать этап конфигурации серверов (смотри описание требований выше) перед выкладкой приложения
        Сборка приложения должна производиться вне директории приложения, а в рабочем окружении сборки
        Выкладка должна производиться через симлинки
        Конфиги, логи и прочие необходимые между релизами файлы должны храниться в общей директории, к которой создаются симлинки
        Сценарий CI/CD должен храниться в том же репозитории, что и код и использоваться оттуда
        Выкладка должна начинаться автоматически по пушу только в ветку master
        Сборка и выкладка приложения должна производиться от имени пользователя cicd
        Сценарий CI/CD должен включать в себя этап проверки кода через Linter в любом виде

    К сборке логов:
        В роли установки стека сбора логов должны содержаться параметры для определения конкретной версии устанавливаемых компонент
        Компоненты стека должны использовать как можно меньшее количество ресурсов
        Компоненты стека НЕ должны быть доступны извне даже через nginx. Разрешается только доступ через проброс портов средствами SSH
        Логи приложения должны собираться средствами Fluentd и отправляться в стек сбора логов

    К системе мониторинга:
        В роли установки стека Prometheus и Grafana должны содержаться параметры для определения конкретной версии устанавливаемых компонент
        Компоненты стека Prometheus НЕ должны быть доступны извне даже через nginx. Разрешается только доступ через проброс портов средствами SSH
        Grafana должна быть доступна через nginx с использованием своего DNS имени

Порядок действй во время презентации проекта:

    Запустить окружение через скрипт up.sh
    Рассказать про структуру репозитория и используемые компоненты
    Показать страницу запущенного приложения через прокси
    Продемонстрировать работу CI/CD, запушив коммит в репозиторий, после чего продемонстрировать результат
    Показать страницу Grafana, в ней продемонстрировать запрос метрик из Prometheus и системы сбора логов
    Остановить окружение через down.sh
