https://gitlab.rebrainme.com/apps/speedtest
Вариант 16: {"base_image": "nginx-unit", "proxy": "caddy", "database": "sqlite"}


Требования к реализации:

    К запущенному приложению:
        Базовый образ - "base_image" (значение указано выше)
        Приложение должно быть запущено в frontend режиме с хранением телеметрии, обфускацией ID и без редактировния IP адресов
        + Конфигурация должна производиться исключительно через переменные окружения
        Отправлять логи в EFK средствами Docker
        Образ должен собираться из docker-compose файла
        + Конфигурационный файл серверов должен использовать только один сервер - fi.openspeed.org
        + Конфигурационный файл серверов должен подключаться как volume

    К Dockerfile:
        + Образ не должен содержать конфигурационный файл серверов
        Образ должен кешировать как можно больше при минимальном количестве шагов

    К запущенной базе данных:
        Должна использоваться БД - "database" (значение указано выше)
        + Хранилище БД должно подключаться как volume
        Если требуется использовать сетевую базу данных:
            Отправлять логи в EFK средствами Docker
            На localhost хоста должен быть проброшен порт базы данных

    К запущенному Proxy:
        В качестве прокcи нужно использовать - "proxy" (значение указано выше)
        Отправлять логи в EFK средствами Docker
        Должно слушать порт 8080 на localhost запущенной машины
        Перенаправлять запросы в приложение
        Адрес, с которого производится запрос, должен пробрасываться в приложение через заголовок

    К запущенным стекам:
        Стек приложения должен запускаться с именем проекта rbmdkrfinalapp
        Стек EFK должен запускаться с именем проекта rbmdkrfinalefk

    К запущенному ElasticSearch:
        Конфигурация должна производиться исключительно через переменные окружения
        Разрешенный объем используемой оперативной памяти - 512 MiB
        Отправлять логи в EFK средствами Docker
        - Должен использовать Open Source образ (Рекомендуем ознакомиться opendistro от amazon)

    К запущенному Fluentd:
        Должен слушать на localhost хоста для доступа со стороны Docker для отправки логов
        Должен отправлять логи в ElasticSearch кусками по 10 MiB
        + Конфигурационный файл должен храниться в файле и подключаться внутрь контейнера как volume
        Параметры подключения к ElasticSearch должны передаваться через переменные окружения в конфигурационный файл
        Не должен отправлять собственные логи
        Хранить собственные логи в формате JSON в файлах по 10 MiB с ротацией в 5 файлов

    К запущенной Kibana:
        Конфигурация должна производиться исключительно через переменные окружения
        Разрешенный объем используемой оперативной памяти - 512 MiB
        Отправлять логи в EFK средствами Docker
        Должна слушать порт 5601 на localhost запущенной машины для доступа к Kibana
        Должна использовать Open Source образ
        Должна подключаться к ElasticSearch

    К оформлению и содержанию репозитория:
        Наличие файла final.json с следующими полями:
            'account' - аккаунт в RebrainMe GitLab
            'date' - назначенная дата сдачи по московскому времени в формате YYYY-MM-DDThh:mm:ss (пример валидного времени - 2020-01-01T12:00:00)
            'database' - имя базы данных из задания
            'proxy' - имя прокси сервера
            'base_image' - имя базового образа для запуска приложения
        Наличие исполняемого скрипта на bash с именем up.sh, используя который запускается рабочее окружение при помощи docker-compose
        Должны присутстовать 2 docker-compose файла:
            app.compose.yml - запуск предложенного приложения с зависимостями - базой данных, прокси и средой исполнения, указанных в присланных заданиях
            efk.compose.yml - EFK стек для сбора логов с приложений
        Должен присутствовать Dockerfile, используемый для сборки образа с приложением

Порядок действий во время презентации проекта:

    Запустить стеки через скрипт up.sh
    Вывести список запущенных контейнеров
    Показать страницу запущенного приложения через прокси
    Продемонстрировать работоспособность приложения
    Показать содержимое базы данных
    Продемонстрировать что логи с каждого приложения попадают в EFK стек

P.S. если будут ошибки. что сервера не найдены, используйте данный конфиг

{
                "name": "Speedtest Demo Server (Helsinki)",
                "server" :"//speedtest.ic.uz.ua/",
                "dlURL" :"/backend/garbage.php",
                "ulURL" :"/backend/empty.php",
                "pingURL" :"/backend/empty.php",
                "getIpURL" :"/backend/getIP.php"
},
